# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Tesseract CMake Unittests

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      # '🟨','🟦','🟩','🟥','🟪'
      matrix:
        os: [ubuntu-24.04']
        build_type: [Release]
        c_compiler: [g++]
        include:
          - icon: '🟥'
            os: ubuntu-24.04
            cpp_compiler: g++
            cxxflags: -Wno-format-security

    steps:
    - name: '📦 Install dependencies (Linux)'
      run: |
           # sudo apt-get update
           sudo apt-get install git autoconf libleptonica-dev libpango1.0-dev 

    - name: '🧰 Get Source'
      run: |
           git clone --depth 1 https://github.com/zdenop/tesseract.git -b cmake_testing --single-branch
           cd tesseract
           git submodule update --init
           git clone --depth 1 https://github.com/egorpugin/tessdata tessdata_unittest
           cp tessdata_unittest/fonts/* test/testing/
           cp -r tessdata_unittest/* ../

    - name: '️🔧 Set build output dir'
      id: strings
      shell: bash
      run: |
           echo "build-output-dir=${{ github.workspace }}/tesseract/build" >> "$GITHUB_OUTPUT"
           
    - name: '🔧 Configure CMake'
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_CXX_FLAGS="${{ matrix.cxxflags}}" \
              -S ${{ github.workspace }}/tesseract -DSW_BUILD=OFF -DBUILD_SHARED_LIBS=OFF -DBUILD_TRAINING_TOOLS=ON -DBUILD_TESTS=ON

    - name: '🚧 Build'
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: |
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} -j 4

    - name: '🧪 Run tests'
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        ctest --build-config ${{ matrix.build_type }} --output-on-failure -O test-suite.log --test-dir ${{ steps.strings.outputs.build-output-dir }} -j 4
      

